# 워크 플로우 이름
name: OSS CI with Gradle 

# 워크 플로우가 언제 실행될지를 정한다.
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# 워크 플로우가 깃 레포에 대한 권한을 읽기 만 가능하게 설정한다.
permissions:
  contents: read

# 워크플로우에서 할 작업을 정의한다.
jobs:
  # 작업 환경 = 우분투 최신 버전
  build:
    runs-on: ubuntu-latest

    # 깃허브에서 제공하는 checkout 액션 사용
    steps:
    - uses: actions/checkout@v3

    # JDK 17 설정
    # temurin = Adoptium에서 제공하는 JDK
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    # gradle wrapper 파일에 실행 권한을 부여
    # gradle wrapper = 개발자가 특정 버전의 Gradle을 미리 설치하지 않고도 Gradle 빌드를 실행할 수 있게 해주는 편리한 도구        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # application.yml 파일 
    - name: Create application.yml from secret
      run: echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml

    # Gradle 빌드 액션을 이용해서 프로젝트 빌드
    - name: Build with Gradle
      uses: gradle/gradle-build-action@v2.6.0
      with:
        arguments: build

    # 빌드해서 생긴 JAR 파일을 깃허브 아티팩트로 업로드
    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: opensource_supporter
        path: build/libs/opensource_supporter-0.0.1-SNAPSHOT.jar

  # 배포
  deploy:
    needs: build
    runs-on: ubuntu-latest

    # 위의 빌드 작업한 JAR 파일 = 아티팩트를 다운로드
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v2
      with:
        name: opensource_supporter
        path: build/libs/

    # EC2에 배포
    # EC2 SSH 키를 OSSKey.pem 파일로 저장 (위치는 GitHub 서버)
    # SCP를 사용하여 JAR 파일을 EC2 서버로 복사
    # SSH를 사용하여 EC2 서버에 연결하고 현재 실행 중인 Java 프로세스를 종료한 다음 새로운 Java 프로세스 생성 및 실행
    ## NLP 적용하면 IP -> 도메인으로 수정 + EC2 늘리면 run 추가
    - name: Deploy to EC2
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > OSSKey.pem
        chmod 600 OSSKey.pem
        scp -i OSSKey.pem -o StrictHostKeyChecking=no build/libs/opensource_supporter-0.0.1-SNAPSHOT.jar ubuntu@ec2-13-124-206-202.ap-northeast-2.compute.amazonaws.com:/home/ubuntu/opensource_supporter.jar
        ssh -i OSSKey.pem -o StrictHostKeyChecking=no ubuntu@ec2-13-124-206-202.ap-northeast-2.compute.amazonaws.com "pgrep java | xargs kill -9; nohup java -jar /home/ubuntu/opensource_supporter.jar > app.log 2>&1 &"
        rm -f OSSKey.pem
